package com.deepak.mobikwikimage.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_UNSPLASH".
*/
public class PhotoUnsplashDao extends AbstractDao<PhotoUnsplash, String> {

    public static final String TABLENAME = "PHOTO_UNSPLASH";

    /**
     * Properties of entity PhotoUnsplash.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Alt_description = new Property(1, String.class, "alt_description", false, "ALT_DESCRIPTION");
        public final static Property ImageData = new Property(2, byte[].class, "imageData", false, "IMAGE_DATA");
        public final static Property Urls = new Property(3, String.class, "urls", false, "URLS");
        public final static Property Page = new Property(4, Integer.class, "page", false, "PAGE");
    }


    public PhotoUnsplashDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoUnsplashDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_UNSPLASH\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ALT_DESCRIPTION\" TEXT," + // 1: alt_description
                "\"IMAGE_DATA\" BLOB," + // 2: imageData
                "\"URLS\" TEXT," + // 3: urls
                "\"PAGE\" INTEGER);"); // 4: page
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PHOTO_UNSPLASH_PAGE ON \"PHOTO_UNSPLASH\"" +
                " (\"PAGE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_UNSPLASH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoUnsplash entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String alt_description = entity.getAlt_description();
        if (alt_description != null) {
            stmt.bindString(2, alt_description);
        }
 
        byte[] imageData = entity.getImageData();
        if (imageData != null) {
            stmt.bindBlob(3, imageData);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(4, urls);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(5, page);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoUnsplash entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String alt_description = entity.getAlt_description();
        if (alt_description != null) {
            stmt.bindString(2, alt_description);
        }
 
        byte[] imageData = entity.getImageData();
        if (imageData != null) {
            stmt.bindBlob(3, imageData);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(4, urls);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(5, page);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PhotoUnsplash readEntity(Cursor cursor, int offset) {
        PhotoUnsplash entity = new PhotoUnsplash( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alt_description
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // imageData
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urls
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoUnsplash entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAlt_description(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageData(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setUrls(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPage(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PhotoUnsplash entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PhotoUnsplash entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoUnsplash entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
